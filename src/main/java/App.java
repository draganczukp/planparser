import java.awt.TextComponent;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.internal.bind.JsonTreeWriter;
import com.google.gson.stream.JsonWriter;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
// import org.jsoup.nodes.Document.OutputSettings;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

	static int day = -1;
	static Map<String, Integer> colorMap = new HashMap<>();
	// static StringBuffer out;
	static JsonObject root = new JsonObject();

	public static void main(String[] args) {
		try {

			Document doc = Jsoup.parse(
					new URL("http://www.plan.uz.zgora.pl/grupy_plan.php?pId_Obiekt=19525").openStream(), "UTF-8",
					"http://www.plan.uz.zgora.pl/grupy_plan.php?pId_Obiekt=19525");
			Element table = doc.getElementsByTag("table").first();

			root.add("daysOff", new JsonArray());
			root.add("lessons", new JsonArray());

			table.children().first().children().stream().filter(e -> !e.text().equals("B")).forEach(e -> {

				// System.out.println("Class=> "+e.className());
				if (e.className().equals("gray")) {
					// System.out.println("Gray");
					day++;
					return;
				}
				List<Element> tds = e.children().stream()
						// .peek(System.out::println)
						.collect(Collectors.toList());

				PlanElement pe = new PlanElement();

				pe.from(tds.get(1).text());
				pe.to(tds.get(2).text());
				pe.name = tds.get(3).text();
				pe.teacher = tds.get(5).child(0).text();
				pe.loc = tds.get(6).text();
				// System.out.println(tds.get(7).text());
				pe.term(tds.get(7).text());

				int color = 0xFFFFFFFF;
				if (colorMap.containsKey(pe.name)) {
					color = colorMap.get(pe.name);
				} else {
					int r = (int) Math.abs(Math.floor(Math.random() * 255f));
					int g = (int) Math.abs(Math.floor(Math.random() * 255f));
					int b = (int) Math.abs(Math.floor(Math.random() * 255f));

					color = 0xff | r << 16 | g << 8 | b;
					colorMap.put(pe.name, color);
				}

				// out
				JsonObject lesson = new JsonObject();
				lesson.addProperty("color", new Integer(color));
				lesson.add("exams", new JsonArray());
				lesson.add("grades", new JsonArray());
				lesson.addProperty("name", pe.name);

				JsonObject lessonDet = new JsonObject();
				lessonDet.add("date", JsonNull.INSTANCE);
				lessonDet.addProperty("day", day);
				lessonDet.addProperty("hourStart", pe.from);
				lessonDet.addProperty("hourEnd", pe.to);
				lessonDet.addProperty("place", pe.loc);
				lessonDet.addProperty("week", pe.term);

				JsonObject teacher = new JsonObject();
				teacher.addProperty("consultations", "");
				teacher.addProperty("email", "");
				teacher.add("imageName", JsonNull.INSTANCE);
				teacher.addProperty("name", pe.teacher);
				teacher.addProperty("phone", "");
				teacher.addProperty("room", "");

				lessonDet.add("teacher", teacher);

				lesson.add("lessonDetails", new JsonArray());
				lesson.get("lessonDetails").getAsJsonArray().add(lessonDet);
				lesson.add("lessonType", new JsonObject());
				lesson.get("lessonType").getAsJsonObject().addProperty("name", pe.name);
				lesson.add("unprepared", new JsonArray());

				root.get("lessons").getAsJsonArray().add(lesson);
			});
			root.addProperty("name", "Generator");
			System.out.println(root.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static class PlanElement {
		int from, to;
		String name, teacher;
		String loc;
		int term;

		void from(String t) {
			String[] split = t.split(":");
			int h = Integer.parseInt(split[0]) * 60;
			int m = Integer.parseInt(split[1]);
			from = h + m;
		}

		void to(String t) {
			String[] split = t.split(":");
			int h = Integer.parseInt(split[0]) * 60;
			int m = Integer.parseInt(split[1]);
			to = h + m;
		}

		void term(String t) {
			switch (t) {
			case "D/":
			case "DI/":
			case "DII/":
				term = 0;
				break;
			case "DP/":
				term = 1;
				break;
			case "DN/":
				term = 2;
				break;
			default:
				// System.out.println("Daty w " + this.name);
			}
		}

		@Override
		public String toString() {
			StringBuffer sb = new StringBuffer();
			sb.append("[From->To]=>").append(from + "->" + to).append("\n").append("[Name]=>").append(name).append("\n")
					.append("[Teacher]=>").append(teacher).append("\n").append("[Loc]=>").append(loc).append("\n")
					.append("[Term]=>").append(term);
			return sb.toString();
		}
	}
}